#!/bin/bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e
set -o pipefail

BUILD_DIR="$1"
BUILDPACK_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")/.." && pwd)"

# dest is the directory where the build artifacts will be installed to.
dest="$BUILD_DIR/vendor/runit"

function compile() {
  set +e

  (
    # Only applies to this sub-shell
    set -e

    # Logs for the sub-shell go to /tmp/runit.log for printing in case of an
    # error.
    exec > /tmp/runit.log 2>&1

    # Use a temporary directory to extract and compile the source
    cd "$(mktemp -d)"

    mkdir -p "$dest"
    mkdir -p "$dest/bin"

    # Extract just the source into the build directory
    tar -xz --wildcards --strip-components=3 -f "$BUILDPACK_DIR/src/runit-2.1.2.tar.gz" "*/src/*"

    # Patch runsvdir to ignore the "supervise" directory so we can have
    # sub-service directories in a parent service directory (example below).
    # Without this, runsvdir tries to start a `supervise` service and fails
    # with errors.
    #
    # Example:
    #   sv/web/run
    #   sv/web/puma/run
    patch -i "$BUILDPACK_DIR/src/supervise.patch" -u runsvdir.c

    # Compile just the commands we need
    make -j "$(nproc --all)" sv runsv runsvdir

    # Copy runit commands to vendored path
    cp sv runsv runsvdir "$dest/bin"

    # Copy the runsvdir-dyno (Procfile style definition helper) into bin
    cp "$BUILDPACK_DIR/bin/runsvdir-dyno" "$dest/bin"
  )

  retVal=$?
  if [[ $retVal -ne 0 ]]; then
    echo " !     runit: Failed to compile runit"
    cat /tmp/runit.log

    exit $retVal
  fi

  # Reenable exit on failure
  set -e
}

echo "-----> runit: Compiling"
compile

# Adds vendored runit binaries to the path.
mkdir -p "$BUILD_DIR/.profile.d"
cat <<'EOF' > "$BUILD_DIR/.profile.d/runit.sh"
export PATH=$PATH:/app/vendor/runit/bin
EOF
